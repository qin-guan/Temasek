@page "/"
@using Microsoft.AspNetCore.Authorization
@using Temasek.Calendarr.Features.Sync

@inject InMemoryLogService LogService
@inject SyncService SyncService

@implements IDisposable

@attribute [Authorize]

<PageTitle>Calendarr</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
             AlignItems="AlignItems.Center">
    <h2>Sync status</h2>
    <RadzenButton Text="Force full sync" Click="ForceSync"/>
</RadzenStack>

<div>
    @foreach (var log in LogService.GetLogs().Reverse())
    {
        <div style="margin-bottom: 4px" class="@GetLogClassNames(log.Level)">
            <span style="color: #666;">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</span>
            <span style="margin: 0 5px;">[@log.Level]</span>
            <span style="margin-right: 5px;">[<span title="@log.Category">@log.Category</span>]</span>
            <span>@log.Message</span>
        </div>
    }
</div>

@code {

    protected override void OnInitialized()
    {
        LogService.OnLogsChanged += OnLogServiceOnOnLogsChanged;
    }

    private void OnLogServiceOnOnLogsChanged()
    {
        InvokeAsync(StateHasChanged);
    }
    
    private string GetLogClassNames(LogLevel level)
    {
        return level switch
        {
            LogLevel.Critical => "rz-background-color-danger-darker rz-color-on-danger-darker rz-p-2",
            LogLevel.Error => "rz-color-danger",
            LogLevel.Warning => "rz-background-color-warning rz-color-on-warning",
            LogLevel.Information => "rz-color-info-darker",
            _ => ""
        };
    }

    public async Task ForceSync()
    {
        await SyncService.ForceSync();
    }

    public void Dispose()
    {
        LogService.OnLogsChanged -= OnLogServiceOnOnLogsChanged;
    }

}