@page "/"
@using Microsoft.AspNetCore.Authorization
@using Temasek.Calendarr.Features.Sync

@inject InMemoryLogService LogService
@inject SyncService SyncService

@implements IDisposable

@attribute [Authorize]

<PageTitle>Calendarr</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween"
             AlignItems="AlignItems.Center">
    <h2>Sync status</h2>
    <RadzenButton Text="Force full sync" Click="ForceSync"/>
</RadzenStack>

<RadzenDataGrid @ref="grid" TItem="InMemoryLogService.LogMessage"
                Data="LogService.GetLogs().Reverse()"
                Density="Density.Compact"
                AllowFiltering="true"
                AllowSorting="true"
                AllowColumnResize="true"
>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(InMemoryLogService.LogMessage.Timestamp)"
                              Title="Timestamp"
                              Width="200px"
                              Filterable="false"
        />
        <RadzenDataGridColumn Property="@nameof(InMemoryLogService.LogMessage.Level)"
                              Title="Level"
                              Width="200px"
                              Sortable="false"
        />
        <RadzenDataGridColumn Property="@nameof(InMemoryLogService.LogMessage.Category)"
                              Title="Category"
                              Width="300px"
                              Sortable="false"
        />
        <RadzenDataGridColumn Property="@nameof(InMemoryLogService.LogMessage.Message)"
                              Title="Message"
                              Filterable="false"
                              Sortable="false"
                              MinWidth="400px"
        />
    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<InMemoryLogService.LogMessage> grid;

    protected override void OnInitialized()
    {
        LogService.OnLogsChanged += OnLogServiceOnOnLogsChanged;
    }

    private void OnLogServiceOnOnLogsChanged()
    {
        grid.Reload();
        InvokeAsync(StateHasChanged);
    }

    public async Task ForceSync()
    {
        await SyncService.ForceSync();
    }

    public void Dispose()
    {
        LogService.OnLogsChanged -= OnLogServiceOnOnLogsChanged;
    }

}