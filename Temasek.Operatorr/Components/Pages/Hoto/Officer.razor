@page "/Hoto/Officer"
@using System.Security.Claims
@using SqlSugar
@using Temasek.Operatorr.Entities

@inject ISqlSugarClient SqlClient
@inject IHttpContextAccessor HttpContextAccessor

<RadzenStack>
    <RadzenText TextStyle="TextStyle.Overline">Hand Over Take Over</RadzenText>
    <RadzenText TextStyle="TextStyle.DisplayH5">Who are you taking over?</RadzenText>
    <RadzenText TextStyle="TextStyle.Caption">Pick from the appropriate role below.</RadzenText>

    <RadzenRadioButtonList @bind-Value="Selected" TValue="Option?" class="rz-mt-2">
        <Items>
            <RadzenRadioButtonListItem Text="DC" Value="Option.Clerk" TValue="Option?"/>
            <RadzenRadioButtonListItem Text="CDOO" Value="Option.Officer" TValue="Option?"/>
            <RadzenRadioButtonListItem Text="CDOS" Value="Option.Spec" TValue="Option?"/>
        </Items>
    </RadzenRadioButtonList>

    @if (Selected is not null)
    {
        <hr class="rz-border-color-base-300 rz-w-100"/>
        @switch (Selected)
        {
            case Option.Clerk:
                <RadzenStack Gap="0.2rem">
                    <RadzenCard class="rz-background-color-base-800">
                        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start"
                                     Gap="1rem">
                            <RadzenText TextStyle="TextStyle.Overline">Outgoing DC</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@Dc?.UserId</b></RadzenText>
                        </RadzenStack>
                    </RadzenCard>

                    <RadzenIcon Icon="arrow_downward" class="rz-mx-auto"/>

                    <RadzenCard class="rz-background-color-success-lighter">
                        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start"
                                     Gap="1rem">
                            <RadzenText TextStyle="TextStyle.Overline">Incoming DC</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1">
                                <b>@HttpContextAccessor.HttpContext?.User.Identity?.Name</b>
                                <span>
                                    (@HttpContextAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier))
                                </span>
                            </RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenStack>
                break;
            case Option.Officer:
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start"
                                 Gap="1rem">
                        <RadzenText TextStyle="TextStyle.Overline">CDOO</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@Cdoo?.UserId</b></RadzenText>
                    </RadzenStack>
                </RadzenCard>
                break;
            case Option.Spec:
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start"
                                 Gap="1rem">
                        <RadzenText TextStyle="TextStyle.Overline">CDOS</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@Cdos?.UserId</b></RadzenText>
                    </RadzenStack>
                </RadzenCard>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        <RadzenCheckBoxList @bind-Value="@CheckedItems" TValue="int" Orientation="Orientation.Vertical" Gap="1rem">
            <Items>
                @foreach (var v in Checklists[Selected ?? Option.Clerk].Select((item, idx) => new { Item = item, Idx = idx }))
                {
                    <RadzenCheckBoxListItem Text="@v.Item" Value="@v.Idx"/>
                }
            </Items>
        </RadzenCheckBoxList>
    }
</RadzenStack>

@code {

    public Option? Selected { get; set; }

    public Dictionary<Option, List<string>> Checklists = new()
    {
        {
            Option.Clerk, [
                "During the hand and take over, I was briefed by the outgoing and the following matters to his/her satisfaction. I am now conversant with these matters and have all available information relevant to the appointment.",
                "I have read up on the Duty Clerk Standing Order to understand by duties/responsibilities",
                "I have checked all 9 keys are accounted for in the duty clerk keypress",
                "I have checked that there is 1 duty clerk keypress key",
                TimeOnly.FromDateTime(DateTime.Now) > new TimeOnly(18, 0)  && TimeOnly.FromDateTime(DateTime.Now) < new TimeOnly(6, 0) ? "I have ensured that all key transactions from yesterday till today are completed / tracked if not returned, with book closed" : ""
            ]
        },
        { Option.Officer, ["I have read and understood the Complex Duty Orderly Officer Standing Order."] },
        { Option.Spec, ["I have read and understood the Complex Duty Order Sergeant Standing Order."] },
    };

    public IEnumerable<int> CheckedItems { get; set; }

    public ClerkShiftRecord? Dc { get; set; }
    public OfficerShiftRecord? Cdoo { get; set; }
    public SpecShiftRecord? Cdos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Dc = await SqlClient.Queryable<ClerkShiftRecord>().OrderByDescending(c => c.Start).FirstAsync();
        Cdoo = await SqlClient.Queryable<OfficerShiftRecord>().OrderByDescending(c => c.Start).FirstAsync();
        Cdos = await SqlClient.Queryable<SpecShiftRecord>().OrderByDescending(c => c.Start).FirstAsync();
    }

    public enum Option
    {
        Clerk,
        Officer,
        Spec
    }

}